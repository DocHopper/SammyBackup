[gcode_macro JCH_CLEAN_NOZZLE]
gcode:
  { action_respond_info("Cleaning Nozzle") }
  RUN_SHELL_COMMAND CMD=NOZZLECLEAN_SOUND
  SET_DISPLAY_TEXT MSG="Cleaning Nozzle"
  G0 X262 Y344 Z10 F15000
  G0 X262 Y344 Z0.5
  G0 X262 Y350 F5000
  G0 X285 Y344
  G0 X285 Y350
  G0 X262 Y344
  G0 X262 Y350
  G0 X285 Y344
  G0 X285 Y350
  G0 X262 Y344
  G0 X262 Y350
  G0 X285 Y344
  G0 X285 Y350
  G0 X262 Y344
  G0 X262 Y350
  G0 X285 Y344
  G0 X285 Y350
  G0 X262 Y344
  G0 X262 Y350
  G0 X285 Y344
  G0 X285 Y350
  G0 X262 Y344
  G0 Z25
  { action_respond_info("Nozzle Cleaned") }
 SET_DISPLAY_TEXT MSG="Nozzle Cleaned"

#####################################################################
#   print_start macro
#####################################################################
[gcode_macro JCH_PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  #SET_FAN_SPEED FAN=octofan SPEED=1
  #SET_FAN_SPEED FAN=bed_fans SPEED=1

  STATUS_HOMING         # Sets SB-leds to homing-mode
  G90                   # Absolut position
  G28                   # Full home (XYZ)

  { action_respond_info("Setting Timelapse custom zhop value") }
  _SET_TIMELAPSE_SETUP PARK_POS=custom CUSTOM_POS_DZ=2

  #SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
  #SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)
  #SET_FAN_SPEED FAN=octofan SPEED=0.4 
  {% if params.FILAMENT_TYPE == 'PLA' %}
    { action_respond_info("PLA Detected") }
    RUN_SHELL_COMMAND CMD=PLA_SOUND
    SET_DISPLAY_TEXT MSG="PLA detected"
    # turn off octofan and bed fans
    SET_FAN_SPEED FAN=bed_fans SPEED=0
  {% endif %}

  {% if params.FILAMENT_TYPE == 'ABS' %}
    { action_respond_info("ABS Detected") }
    RUN_SHELL_COMMAND CMD=ABS_SOUND
    SET_DISPLAY_TEXT MSG="ABS detected"
   # turn on octofan and bed fans
    SET_FAN_SPEED FAN=bed_fans SPEED=1
  {% endif %}

  {% if params.FILAMENT_TYPE == 'ASA' %}
    { action_respond_info("ASA Detected") }
    RUN_SHELL_COMMAND CMD=ASA_SOUND
    SET_DISPLAY_TEXT MSG="ASA detected"
    # turn on octofan and bed fans
    SET_FAN_SPEED FAN=bed_fans SPEED=1
  {% endif %}

  {% if params.FILAMENT_TYPE == 'TPU' %}
    { action_respond_info("TPU Detected") }
    SET_DISPLAY_TEXT MSG="TPU detected"
    # turn off octofan and bed fans
    SET_FAN_SPEED FAN=bed_fans SPEED=0
  {% endif %}
  
  {% if params.FILAMENT_TYPE == 'PETG' %}
    { action_respond_info("PETG Detected") }
    SET_DISPLAY_TEXT MSG="PETG detected"
    # turn off octofan and bed fans
    SET_FAN_SPEED FAN=bed_fans SPEED=0
  {% endif %}
  
  RUN_SHELL_COMMAND CMD=BEDHEATING_SOUND
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
  STATUS_HEATING                                      # Sets SB-leds to heating-mode
  M106 S255                                           # Turns on the PT-fan
  G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}C"
  M190 S{target_bed} 
  
  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    RUN_SHELL_COMMAND CMD=BEDREACH_SOUND
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P3000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  RUN_SHELL_COMMAND CMD=NOZZLEHEAT_SOUND
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c
  CLEAN_NOZZLE                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="Quad Gantry Level"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  RUN_SHELL_COMMAND CMD=BEDMESH_SOUND
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  RUN_SHELL_COMMAND CMD=NOZZLECLEAN_SOUND
  CLEAN_NOZZLE
  SET_DISPLAY_TEXT MSG="Commencifying print"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  RUN_SHELL_COMMAND CMD=PRIMING_SOUND
  #VORON_PURGE
  RUN_SHELL_COMMAND CMD=PRINTSTART_SOUND
  #LINE_PURGE

[gcode_macro JCH_PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
    STATUS_COOLING
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    RUN_SHELL_COMMAND CMD=FINISHED_SOUND   
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    G91
    BED_MESH_CLEAR
    UPDATE_DELAYED_GCODE ID=post_endprint DURATION=10
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro JCH_CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro JCH_ERROR_PRINT]
gcode:
    RUN_SHELL_COMMAND CMD=ERROR_SOUND
    CANCEL_PRINT


[gcode_macro JCH_PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        RUN_SHELL_COMMAND CMD=PAUSED_SOUND
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro JCHRESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        RUN_SHELL_COMMAND CMD=RESUMING_SOUND
        BASE_RESUME                                                                  ; resume print
    {% endif %}



[gcode_macro JCH_TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
